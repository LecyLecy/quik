'use client'

import React, { useState, useEffect } from 'react'
import Header from '@/components/Header'
import QRCode from 'qrcode'

interface WhatsAppLinkPageProps {
  onMenuToggle: () => void
  sidebarOpen: boolean
  onLinked: () => void
  refreshConnection?: () => void
}

export default function WhatsAppLinkPage({ onMenuToggle, sidebarOpen, onLinked, refreshConnection }: WhatsAppLinkPageProps) {
  const [qrCode, setQrCode] = useState<string>('')
  const [isConnecting, setIsConnecting] = useState(false)
  const [connectionId, setConnectionId] = useState<string>('')

  // Generate QR code when component mounts
  useEffect(() => {
    generateQRCode()
  }, [])

  const generateQRCode = () => {
    // Generate a unique connection ID
    const id = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)
    setConnectionId(id)
    
    // For demo purposes, create a mock QR code
    // In production, this would be generated by WhatsApp Business API
    const demoQRData = `DEMO_WHATSAPP_LINK_${id}_${Date.now()}`
    
    generateQRCodeImage(demoQRData)
    
    // DON'T start polling automatically - only simulate when user clicks button
    // startPolling(id)
  }

  const generateQRCodeImage = async (data: string) => {
    try {
      // Generate proper QR code using qrcode library
      const qrDataUrl = await QRCode.toDataURL(data, {
        width: 256,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      })
      setQrCode(qrDataUrl)
    } catch (error) {
      console.error('Error generating QR code:', error)
      // Fallback to placeholder
      setQrCode('/placeholder-qr.png')
    }
  }

  const simulateConnection = () => {
    setIsConnecting(false)
    
    try {
      // Save WhatsApp connection status
      localStorage.setItem('whatsapp_linked', 'true')
      localStorage.setItem('whatsapp_connection_id', connectionId)
      localStorage.setItem('whatsapp_phone', '+62 812-3456-7890') // Mock phone number
      localStorage.setItem('whatsapp_device_name', 'iPhone')
      
      // Force a small delay to ensure localStorage is written
      setTimeout(() => {
        // Try to refresh connection state if function is available
        if (refreshConnection) {
          refreshConnection()
        }
        
        onLinked()
        
        // Also trigger a storage event manually for same-tab detection
        window.dispatchEvent(new StorageEvent('storage', {
          key: 'whatsapp_linked',
          newValue: 'true',
          oldValue: 'false'
        }))
      }, 100)
      
    } catch (error) {
      console.error('Error simulating connection:', error)
    }
  }

  const refreshQRCode = () => {
    setIsConnecting(false)
    generateQRCode()
  }

  return (
    <div className="flex flex-col h-screen bg-black text-white">
      <Header 
        emoji="ðŸ“±"
        title="Link WhatsApp"
        onMenuToggle={onMenuToggle}
        sidebarOpen={sidebarOpen}
      />

      <div className="flex-1 overflow-y-auto p-6 bg-black flex items-center justify-center">
        <div className="max-w-md mx-auto text-center">
          <div className="bg-[#1e1e1e] rounded-lg p-8">
            
            {/* WhatsApp Logo */}
            <div className="mb-6">
              <div className="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-2xl">ðŸ“±</span>
              </div>
              <h2 className="text-xl font-semibold text-white">Link WhatsApp</h2>
              <p className="text-gray-400 mt-2">
                Scan QR code with your WhatsApp to send stickers
              </p>
            </div>

            {/* Demo Notice */}
            <div className="mb-6 bg-yellow-900/30 border border-yellow-600/50 rounded-lg p-4">
              <h3 className="text-yellow-400 font-semibold mb-2">ðŸš§ Demo Mode</h3>
              <p className="text-yellow-200 text-sm">
                This is a prototype QR code. In production, this would be generated by WhatsApp Business API.
                For demo purposes, click "Simulate Connection" below.
              </p>
            </div>

            {/* QR Code */}
            <div className="mb-6">
              <div className="bg-white p-4 rounded-lg inline-block">
                {qrCode ? (
                  <img 
                    src={qrCode} 
                    alt="WhatsApp Link QR Code" 
                    className="w-48 h-48"
                  />
                ) : (
                  <div className="w-48 h-48 bg-gray-200 flex items-center justify-center">
                    <span className="text-gray-500">Generating...</span>
                  </div>
                )}
              </div>
            </div>

            {/* Status */}
            {isConnecting ? (
              <div className="mb-6">
                <div className="flex items-center justify-center gap-2 text-blue-400">
                  <div className="animate-spin w-4 h-4 border-2 border-blue-400 border-t-transparent rounded-full"></div>
                  <span>Waiting for connection...</span>
                </div>
                <p className="text-gray-500 text-sm mt-2">
                  Open WhatsApp on your phone and scan the QR code
                </p>
              </div>
            ) : (
              <div className="mb-6">
                <p className="text-gray-400 text-sm">
                  Use WhatsApp on your phone to scan this QR code
                </p>
              </div>
            )}

            {/* Instructions */}
            <div className="text-left bg-[#2a2a2a] rounded-lg p-4 mb-6">
              <h3 className="font-semibold mb-2 text-green-400">Production Setup:</h3>
              <ol className="text-sm text-gray-300 space-y-1 mb-4">
                <li>1. Integrate with WhatsApp Business API</li>
                <li>2. Generate authentic QR codes from WhatsApp servers</li>
                <li>3. Handle real device pairing and authentication</li>
                <li>4. Manage webhook callbacks for connection status</li>
              </ol>
              
              <h3 className="font-semibold mb-2 text-blue-400">Demo Mode:</h3>
              <p className="text-sm text-gray-300">
                Click "Simulate WhatsApp Connection" above to test the linking flow.
                This mimics what would happen when you scan a real WhatsApp QR code.
              </p>
            </div>

            {/* Action Buttons */}
            <div className="space-y-3">
              {/* Demo Connection Button */}
              <button
                onClick={simulateConnection}
                className="w-full bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg transition-colors font-semibold"
                disabled={isConnecting}
              >
                ðŸ“± Simulate WhatsApp Connection
              </button>
              
              {/* Refresh Button */}
              <button
                onClick={refreshQRCode}
                className="w-full bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-lg transition-colors"
                disabled={isConnecting}
              >
                ðŸ”„ Refresh QR Code
              </button>
            </div>

            {/* Connection ID for debugging */}
            <p className="text-xs text-gray-600 mt-4">
              Connection ID: {connectionId}
            </p>

          </div>
        </div>
      </div>
    </div>
  )
}
